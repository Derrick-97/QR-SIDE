// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sum_nu_lognu0
double sum_nu_lognu0(arma::cube& nu, arma::vec& nu0, arma::mat& rho);
RcppExport SEXP _QRSIDE_sum_nu_lognu0(SEXP nuSEXP, SEXP nu0SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_nu_lognu0(nu, nu0, rho));
    return rcpp_result_gen;
END_RCPP
}
// cal_nu_entropy
double cal_nu_entropy(arma::cube& nu, arma::mat& rho);
RcppExport SEXP _QRSIDE_cal_nu_entropy(SEXP nuSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_nu_entropy(nu, rho));
    return rcpp_result_gen;
END_RCPP
}
// ud_loglambda_mu
double ud_loglambda_mu(double Xmij, double Ni, double Lambdaj, double pibmu);
RcppExport SEXP _QRSIDE_ud_loglambda_mu(SEXP XmijSEXP, SEXP NiSEXP, SEXP LambdajSEXP, SEXP pibmuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Xmij(XmijSEXP);
    Rcpp::traits::input_parameter< double >::type Ni(NiSEXP);
    Rcpp::traits::input_parameter< double >::type Lambdaj(LambdajSEXP);
    Rcpp::traits::input_parameter< double >::type pibmu(pibmuSEXP);
    rcpp_result_gen = Rcpp::wrap(ud_loglambda_mu(Xmij, Ni, Lambdaj, pibmu));
    return rcpp_result_gen;
END_RCPP
}
// ud_nu0
arma::vec ud_nu0(arma::cube& nu, arma::mat& rho);
RcppExport SEXP _QRSIDE_ud_nu0(SEXP nuSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(ud_nu0(nu, rho));
    return rcpp_result_gen;
END_RCPP
}
// cal_mu_m
arma::cube cal_mu_m(arma::mat& m, arma::mat& rho, arma::cube& nu, arma::mat& delta);
RcppExport SEXP _QRSIDE_cal_mu_m(SEXP mSEXP, SEXP rhoSEXP, SEXP nuSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_mu_m(m, rho, nu, delta));
    return rcpp_result_gen;
END_RCPP
}
// cal_bmu
arma::cube cal_bmu(arma::mat& beta, arma::cube& mu_m);
RcppExport SEXP _QRSIDE_cal_bmu(SEXP betaSEXP, SEXP mu_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type mu_m(mu_mSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_bmu(beta, mu_m));
    return rcpp_result_gen;
END_RCPP
}
// cal_b2mu
arma::cube cal_b2mu(arma::mat& beta2, arma::mat& rho, arma::cube& nu, arma::mat& delta2);
RcppExport SEXP _QRSIDE_cal_b2mu(SEXP beta2SEXP, SEXP rhoSEXP, SEXP nuSEXP, SEXP delta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta2(delta2SEXP);
    rcpp_result_gen = Rcpp::wrap(cal_b2mu(beta2, rho, nu, delta2));
    return rcpp_result_gen;
END_RCPP
}
// ud_pi
arma::mat ud_pi(arma::vec& invLambda, arma::mat& loglambda_mu, arma::cube& bmu, arma::cube& b2mu, arma::vec& pi0);
RcppExport SEXP _QRSIDE_ud_pi(SEXP invLambdaSEXP, SEXP loglambda_muSEXP, SEXP bmuSEXP, SEXP b2muSEXP, SEXP pi0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type invLambda(invLambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type bmu(bmuSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type b2mu(b2muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi0(pi0SEXP);
    rcpp_result_gen = Rcpp::wrap(ud_pi(invLambda, loglambda_mu, bmu, b2mu, pi0));
    return rcpp_result_gen;
END_RCPP
}
// ud_Lambda
arma::vec ud_Lambda(arma::mat& loglambda_mu, arma::mat& loglambda_s2, arma::mat& pi, arma::cube& bmu, arma::cube& b2mu);
RcppExport SEXP _QRSIDE_ud_Lambda(SEXP loglambda_muSEXP, SEXP loglambda_s2SEXP, SEXP piSEXP, SEXP bmuSEXP, SEXP b2muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_s2(loglambda_s2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type bmu(bmuSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type b2mu(b2muSEXP);
    rcpp_result_gen = Rcpp::wrap(ud_Lambda(loglambda_mu, loglambda_s2, pi, bmu, b2mu));
    return rcpp_result_gen;
END_RCPP
}
// ud_nu
void ud_nu(arma::mat& pi, arma::vec& invLambda, arma::mat& loglambda_mu, arma::cube& nu, arma::mat& beta, arma::mat& beta2, arma::mat& m, arma::mat& rho, arma::mat& delta, arma::mat& delta2, arma::vec& nu0);
RcppExport SEXP _QRSIDE_ud_nu(SEXP piSEXP, SEXP invLambdaSEXP, SEXP loglambda_muSEXP, SEXP nuSEXP, SEXP betaSEXP, SEXP beta2SEXP, SEXP mSEXP, SEXP rhoSEXP, SEXP deltaSEXP, SEXP delta2SEXP, SEXP nu0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLambda(invLambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nu0(nu0SEXP);
    ud_nu(pi, invLambda, loglambda_mu, nu, beta, beta2, m, rho, delta, delta2, nu0);
    return R_NilValue;
END_RCPP
}
// ud_m
void ud_m(arma::mat& pi, arma::mat& loglambda_mu, arma::cube& nu, arma::mat& beta, arma::mat& beta2, arma::mat& m, arma::mat& rho, arma::mat& delta);
RcppExport SEXP _QRSIDE_ud_m(SEXP piSEXP, SEXP loglambda_muSEXP, SEXP nuSEXP, SEXP betaSEXP, SEXP beta2SEXP, SEXP mSEXP, SEXP rhoSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta(deltaSEXP);
    ud_m(pi, loglambda_mu, nu, beta, beta2, m, rho, delta);
    return R_NilValue;
END_RCPP
}
// ud_delta
void ud_delta(arma::mat& pi, arma::mat& loglambda_mu, arma::cube& nu, arma::mat& beta, arma::mat& beta2, arma::mat& m, arma::mat& rho, arma::mat& delta);
RcppExport SEXP _QRSIDE_ud_delta(SEXP piSEXP, SEXP loglambda_muSEXP, SEXP nuSEXP, SEXP betaSEXP, SEXP beta2SEXP, SEXP mSEXP, SEXP rhoSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta(deltaSEXP);
    ud_delta(pi, loglambda_mu, nu, beta, beta2, m, rho, delta);
    return R_NilValue;
END_RCPP
}
// cal_Dmat
double cal_Dmat(arma::mat& pi, arma::mat& loglambda_mu, arma::vec& invLambda, arma::mat& m, arma::mat& rho, arma::cube& nu, arma::mat& delta, arma::cube& mu_m, int t, int k, int k_);
RcppExport SEXP _QRSIDE_cal_Dmat(SEXP piSEXP, SEXP loglambda_muSEXP, SEXP invLambdaSEXP, SEXP mSEXP, SEXP rhoSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP mu_mSEXP, SEXP tSEXP, SEXP kSEXP, SEXP k_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLambda(invLambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type mu_m(mu_mSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type k_(k_SEXP);
    rcpp_result_gen = Rcpp::wrap(cal_Dmat(pi, loglambda_mu, invLambda, m, rho, nu, delta, mu_m, t, k, k_));
    return rcpp_result_gen;
END_RCPP
}
// ud_beta
arma::mat ud_beta(arma::mat& pi, arma::mat& loglambda_mu, arma::vec& invLambda, arma::mat& m, arma::mat& rho, arma::cube& nu, arma::mat& delta, arma::cube& mu_m);
RcppExport SEXP _QRSIDE_ud_beta(SEXP piSEXP, SEXP loglambda_muSEXP, SEXP invLambdaSEXP, SEXP mSEXP, SEXP rhoSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP mu_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLambda(invLambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type mu_m(mu_mSEXP);
    rcpp_result_gen = Rcpp::wrap(ud_beta(pi, loglambda_mu, invLambda, m, rho, nu, delta, mu_m));
    return rcpp_result_gen;
END_RCPP
}
// calELBO
double calELBO(arma::vec& N, arma::mat& X_m, arma::mat& rho, int T, arma::mat& loglambda_mu, arma::mat& loglambda_s2, arma::vec& Lambda, arma::vec& invLambda, arma::mat& pi, arma::vec& pi0, arma::mat& beta, arma::mat& beta2, arma::cube& nu, arma::cube& nu2, arma::vec& nu0, arma::cube& mu_m, arma::mat& delta, arma::mat& delta2);
RcppExport SEXP _QRSIDE_calELBO(SEXP NSEXP, SEXP X_mSEXP, SEXP rhoSEXP, SEXP TSEXP, SEXP loglambda_muSEXP, SEXP loglambda_s2SEXP, SEXP LambdaSEXP, SEXP invLambdaSEXP, SEXP piSEXP, SEXP pi0SEXP, SEXP betaSEXP, SEXP beta2SEXP, SEXP nuSEXP, SEXP nu2SEXP, SEXP nu0SEXP, SEXP mu_mSEXP, SEXP deltaSEXP, SEXP delta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X_m(X_mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_mu(loglambda_muSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type loglambda_s2(loglambda_s2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLambda(invLambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type nu2(nu2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type mu_m(mu_mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type delta2(delta2SEXP);
    rcpp_result_gen = Rcpp::wrap(calELBO(N, X_m, rho, T, loglambda_mu, loglambda_s2, Lambda, invLambda, pi, pi0, beta, beta2, nu, nu2, nu0, mu_m, delta, delta2));
    return rcpp_result_gen;
END_RCPP
}
// DeconvMarker
List DeconvMarker(arma::mat& X_m, arma::mat& rho, int T, arma::mat beta, arma::mat delta, arma::mat pi, arma::vec pi0, arma::vec Lambda, arma::mat m, int max_iter, double eps, bool verbose);
RcppExport SEXP _QRSIDE_DeconvMarker(SEXP X_mSEXP, SEXP rhoSEXP, SEXP TSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP piSEXP, SEXP pi0SEXP, SEXP LambdaSEXP, SEXP mSEXP, SEXP max_iterSEXP, SEXP epsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X_m(X_mSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi0(pi0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(DeconvMarker(X_m, rho, T, beta, delta, pi, pi0, Lambda, m, max_iter, eps, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QRSIDE_sum_nu_lognu0", (DL_FUNC) &_QRSIDE_sum_nu_lognu0, 3},
    {"_QRSIDE_cal_nu_entropy", (DL_FUNC) &_QRSIDE_cal_nu_entropy, 2},
    {"_QRSIDE_ud_loglambda_mu", (DL_FUNC) &_QRSIDE_ud_loglambda_mu, 4},
    {"_QRSIDE_ud_nu0", (DL_FUNC) &_QRSIDE_ud_nu0, 2},
    {"_QRSIDE_cal_mu_m", (DL_FUNC) &_QRSIDE_cal_mu_m, 4},
    {"_QRSIDE_cal_bmu", (DL_FUNC) &_QRSIDE_cal_bmu, 2},
    {"_QRSIDE_cal_b2mu", (DL_FUNC) &_QRSIDE_cal_b2mu, 4},
    {"_QRSIDE_ud_pi", (DL_FUNC) &_QRSIDE_ud_pi, 5},
    {"_QRSIDE_ud_Lambda", (DL_FUNC) &_QRSIDE_ud_Lambda, 5},
    {"_QRSIDE_ud_nu", (DL_FUNC) &_QRSIDE_ud_nu, 11},
    {"_QRSIDE_ud_m", (DL_FUNC) &_QRSIDE_ud_m, 8},
    {"_QRSIDE_ud_delta", (DL_FUNC) &_QRSIDE_ud_delta, 8},
    {"_QRSIDE_cal_Dmat", (DL_FUNC) &_QRSIDE_cal_Dmat, 11},
    {"_QRSIDE_ud_beta", (DL_FUNC) &_QRSIDE_ud_beta, 8},
    {"_QRSIDE_calELBO", (DL_FUNC) &_QRSIDE_calELBO, 18},
    {"_QRSIDE_DeconvMarker", (DL_FUNC) &_QRSIDE_DeconvMarker, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_QRSIDE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
